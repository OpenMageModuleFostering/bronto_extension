<?php

/**
 * @package     Bronto\Reminder
 * @copyright   2011-2012 Bronto Software, Inc.
 * @version     1.5.0
 */
class Bronto_Reminder_Model_Observer
{
    const NOTICE_IDENTIFER = 'bronto_reminder';

    /**
     * @param Varien_Event_Observer $observer
     *
     * @return mixed
     */
    public function checkBrontoRequirements(Varien_Event_Observer $observer)
    {
        if (!Mage::getSingleton('admin/session')->isLoggedIn()) {
            return;
        }

        // Verify Requirements
        if (!Mage::helper(self::NOTICE_IDENTIFER)->varifyRequirements(self::NOTICE_IDENTIFER, array('soap', 'openssl'))) {
            return;
        }
    }

    /**
     * Include auto coupon type
     *
     * @param Varien_Event_Observer $observer
     *
     * @return Bronto_Reminder_Model_Observer
     */
    public function getCouponTypes($observer)
    {
        if ($transport = $observer->getEvent()->getTransport()) {
            $transport->setIsCouponTypeAutoVisible(true);
        }
        return $this;
    }

    /**
     * Add custom comment after coupon type field
     *
     * @param Varien_Event_Observer $observer
     *
     * @return Bronto_Reminder_Model_Observer
     */
    public function updatePromoQuoteTabMainForm($observer)
    {
        $form = $observer->getEvent()->getForm();
        if (!$form) {
            return $this;
        }
        if ($fieldset = $form->getElements()->searchById('base_fieldset')) {
            if ($couponTypeFiled = $fieldset->getElements()->searchById('coupon_type')) {
                $couponTypeFiled->setNote(Mage::helper('bronto_reminder')->__('Coupons can be auto-generated by reminder promotion rules.'));
            }
        }
        return $this;
    }

    /**
     * Send scheduled notifications
     *
     * @return Bronto_Reminder_Model_Observer
     */
    public function scheduledNotification()
    {
        Mage::helper('bronto_reminder')->writeDebug('scheduledNotification() triggered...');
        if (Mage::helper('bronto_reminder')->isEnabled()) {
            $result = Mage::getModel('bronto_reminder/rule')->sendReminderEmails();
            return $result;
        } else {
            return 'Bronto_Reminder module is not enabled.';
        }
        Mage::helper('bronto_reminder')->writeDebug('Done!');
    }

    /**
     * @return void
     */
    public function storeGuestEmailCheckout($observer)
    {
        $quote = $observer->getQuote();
        $postData = Mage::app()->getRequest()->getPost();
        if (   Mage_Checkout_Model_Type_Onepage::METHOD_GUEST == $quote->getCheckoutMethod()
            && isset($postData['billing'])
        ) {
            $session = Mage::getSingleton('core/session');
            $guestCheck = Mage::getModel('bronto_reminder/guest')
                ->getCollection()
                ->addFieldToFilter('session_id', $session->getSessionId());

            if ($guestCheck->count() == 0) {
                $guestModel = Mage::getModel('bronto_reminder/guest');
                $guestModel->setEmailAddress($quote->getCustomerEmail())
                    ->setFirstname($quote->getCustomerFirstname())
                    ->setLastname($quote->getCustomerLastname())
                    ->setSessionId($session->getSessionId())
                    ->setStoreId(Mage::app()->getStore()->getStoreId())
                    ->setQuoteId(Mage::getSingleton('checkout/session')->getQuote()->getId())
                    ->save();
            }
        }
    }

    /**
     * @return void
     */
    public function guestCheckoutCompleted(Varien_Event_Observer $observer)
    {
        if (!Mage::helper('customer')->isLoggedIn()) {
            // Remove this guest from the extended table
            // so that they do not get reminder emails
            $guests = Mage::getModel('bronto_reminder/guest')
                ->getCollection()
                ->addFieldToFilter('session_id', session_id());

            foreach ($guests as $guest) {
                $guest->delete();
            }
        }
    }
}
